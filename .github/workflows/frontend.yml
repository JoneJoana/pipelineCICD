name: Frontend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    defaults:
      run:
        working-directory: ./front-end-app
    runs-on: ubuntu-latest
    permissions: # Añadimos permisos para que la acción pueda leer y escribir en el registry de Github
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para que se descargue todo el historial de git y enviarlo a SonarCloud. Por defecto es 1, que sólo descarga el último commit.
      - name: Manage NPM Dependencies
        # Utiliza la acción que hemos creado. Importante que no vaya con ""
        uses: ./.github/actions/cache-node-dependencies
        with:
          # Pasamos los valores para los parámetros de la action
          app-name: "react-app"
          working-directory: "./front-end-app"

      - name: Build
        run: npm run build

      - name: Lint
        run: npm run ci:lint

      - name: Test
        run: npm run ci:test

      - name: SonarCloud
        uses: SonarSource/sonarqube-scan-action@v6
        with: # Muy importante esta parte, ya que le dice a SonarCloud que sólo analice el proyecto de front
          projectBaseDir: front-end-app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONT }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3 # Utilizamos la acción de login de Docker del marketplace
        with:
          registry: ghcr.io # añadimos Github como registry de docker
          username: ${{ github.actor }} # El usuario de Github
          password: ${{ secrets.GITHUB_TOKEN }} # El token de Github que ya viene por defecto en los secrets
      
      - name: handle repo naming
        id: docker-metadata
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.actor }}/pipelinecicd_front

      - name: Build Docker Image
        uses: docker/build-push-action@v5 # Utilizamos la acción de build y push de docker del marketplace. Esto hace el docker build y el docker push por debajo
        with:
          context: ./front-end-app # El working directory
          push: true
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}

      - name: Install Netlify # Instalamos la CLI de Netlify para poder hacer el deploy manual
        run: npm install netlify-cli@17.10.1 -g

      - name: Deploy to Netlify
        id: netlify_deploy
        # Usamos el comando netlify deploy de la carpeta dist con el token de autenticación y el id del sitio
        run: |
          netlify deploy \
            --dir dist \
            --site ${{ secrets.NETLIFY_SITE_ID }} \
            --auth ${{ secrets.NETLIFY_API_TOKEN }} \
            --prod